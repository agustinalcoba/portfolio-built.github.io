/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 .\public\models\Book.glb 
*/

import React from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { Sphere, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
function rotateAboutPoint(obj, point, axis, theta, pointIsWorld = false) {
  if (pointIsWorld) {
    obj.parent.localToWorld(obj.position); // compensate for world coordinate
  }

  obj.position.sub(point); // remove the offset
  obj.position.applyAxisAngle(axis, theta); // rotate the POSITION
  obj.position.add(point); // re-add the offset

  if (pointIsWorld) {
    obj.parent.worldToLocal(obj.position); // undo world coordinates compensation
  }

  obj.rotateOnAxis(axis, theta); // rotate the OBJECT
}
export function Book(props) {
  const group = React.useRef();
  const sphere = React.useRef();
  const { scene } = useGLTF("./models/Book.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  useFrame(() => {
    // Animation goes here
    // group.current.rotation.x += 0.001;
    // group.current.rotation.y += 0.001;
    // group.current.rotation.z += 0.001;
  });
  return (
    <>
      {/* <group ref={sphere}>
        <Sphere position={[0, 0.15, 0]} scale={[0.1, 0.1, 0.1]}>
          <meshStandardMaterial color="green" />
        </Sphere>
      </group> */}
      <group {...props} dispose={null} ref={group}>
        <primitive object={nodes.Bone} />
        <skinnedMesh
          geometry={nodes.Book.geometry}
          material={materials.Book}
          skeleton={nodes.Book.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Sheets.geometry}
          material={materials.Material}
          skeleton={nodes.Sheets.skeleton}
        />
      </group>
    </>
  );
}

useGLTF.preload("./models/Book.glb");
