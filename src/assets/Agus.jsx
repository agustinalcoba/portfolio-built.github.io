/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 .\public\models\Agus.glb 
*/

import React, { useEffect } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations, Sphere } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { TextureLoader } from "three";

const Particles = () => {
  let result = [];
  for (let i = 0; i < 100; i++) {
    const position = [
      (Math.random() - 0.5) * 10,
      (Math.random() - 0.5) * 10,
      (Math.random() - 0.5) * 10,
    ];
    const _scale = Math.random() * 0.1;
    const scale = [_scale, _scale, _scale];
    // console.log(position);
    result.push(
      <Sphere scale={scale} position={position} key={i}>
        {/* <meshBasicMaterial color={"#4851BF"} /> */}
      </Sphere>
    );
  }
  return result;
};
export function Agus(props) {
  const group = React.useRef();
  const particles = React.useRef();
  const { scene, animations } = useGLTF("./models/Agus.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);

  const textureLoader = new TextureLoader();
  useFrame((state) => {
    // console.log(state);
    group.current.rotation.y += 0.001;
    particles.current.rotation.y -= 0.002;
    particles.current.rotation.x -= 0.001;
    particles.current.rotation.z -= 0.001;
    // const { x, y } = state.pointer;
    // console.log(x);
  });
  useEffect(() => {
    const agusTexture = textureLoader.load("./textures/agusSkin.png");
    scene.traverse((child) => {
      child.material = agusTexture;
    });

    actions["Intro"].play();
  }, []);
  return (
    <group ref={group} {...props} dispose={null}>
      <group ref={particles}>
        <Particles />
      </group>
      <group name="Scene">
        <group name="rig">
          <primitive object={nodes.root} />
          <primitive object={nodes["MCH-torsoparent"]} />
          <primitive object={nodes["MCH-hand_ikparentL"]} />
          <primitive object={nodes["MCH-upper_arm_ik_targetparentL"]} />
          <primitive object={nodes["MCH-hand_ikparentR"]} />
          <primitive object={nodes["MCH-upper_arm_ik_targetparentR"]} />
          <primitive object={nodes["MCH-foot_ikparentL"]} />
          <primitive object={nodes["MCH-thigh_ik_targetparentL"]} />
          <primitive object={nodes["MCH-foot_ikparentR"]} />
          <primitive object={nodes["MCH-thigh_ik_targetparentR"]} />
          <group name="Body">
            <skinnedMesh
              name="Cube001"
              geometry={nodes.Cube001.geometry}
              material={materials.Green_Skin}
              skeleton={nodes.Cube001.skeleton}
            />
            <skinnedMesh
              name="Cube001_1"
              geometry={nodes.Cube001_1.geometry}
              material={materials.Outline}
              skeleton={nodes.Cube001_1.skeleton}
            />
          </group>
          <group name="Head">
            <skinnedMesh
              name="Cube003"
              geometry={nodes.Cube003.geometry}
              material={materials.Green_Head}
              skeleton={nodes.Cube003.skeleton}
            />
            <skinnedMesh
              name="Cube003_1"
              geometry={nodes.Cube003_1.geometry}
              material={materials.Outline}
              skeleton={nodes.Cube003_1.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./models/Agus.glb");
